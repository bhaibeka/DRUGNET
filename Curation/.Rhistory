pdf(file = file.path(path.diagrams, sprintf("%s.pdf",gsub("drugid_","",drug))), height=4*(plots.no+1), width=16)
par(mfrow=c((plots.no + 1), 4))
fnPlotAUC(first = "ccle", second = "cgp", drug, tissue.type = "all", color = "#666666")
fnPlotAUC(first = "ccle", second = "cgp", drug, tissue.type = "breast", color = "#996666")
fnPlotAUC(first = "ccle", second = "gray", drug, tissue.type = "", color = "#CC3399")
fnPlotAUC(first = "gray", second = "cgp", drug, tissue.type = "", color = "#663399")
i = 1
biomarker = fnDefineBiomarker (gene.id = as.character(top.significant.biomarkers.drug[i,"gene.id"]),
isoform.id = as.character(top.significant.biomarkers.drug[i,"transcript.id"]),
estimate = as.numeric(top.significant.biomarkers.drug[i,"estimate"]),
pvalue = as.numeric(top.significant.biomarkers.drug[i,"bonferroni"]),
R2 = as.numeric(top.significant.biomarkers.drug[i,"R2"]),
type = as.character(top.significant.biomarkers.drug[i,"type"]))
biomarker
fnPlotEXP(first = paste0("ccle.",model), second = paste0("gray.",model), biomarker)
fnPlotCCLECGP(biomarker, tissue.type = "breast")
gray = fnValidateWithGray(biomarker, method = "all", color = "#66CC00")
rr[[drug.name]][i, "all.gray.n"] = gray$n
rr[[drug.name]][i, "all.gray.pvalue"] = gray$pvalue
rr[[drug.name]][i, "all.gray.estimate"] = gray$estimate
gray = fnValidateWithGray(biomarker, method = "common", color = "#336600")
rr[drug.name]][i, "common.gray.n"] = gray$n
rr[[drug.name]][i, "common.gray.pvalue"] = gray$pvalue
rr[[drug.name]][i, "common.gray.n"] = gray$n
rr[[drug.name]][i, "common.gray.pvalue"] = gray$pvalue
rr[[drug.name]][i, "common.gray.estimate"] = gray$estimate
dev.off()
drug.name = gsub("drugid_","",drug)
top.significant.biomarkers.drug = top.significant.biomarkers[[drug.name]]
top.significant.biomarkers.drug.5 = NULL
specificities = table(top.significant.biomarkers.drug$specificity)
for(spec in names(specificities))
{
top.significant.biomarkers.drug.5 = rbind(top.significant.biomarkers.drug.5, subset(top.significant.biomarkers.drug, specificity == spec)[1:min(validation.cut.off,specificities[spec]),])
}
top.significant.biomarkers.drug = top.significant.biomarkers.drug.5[order(top.significant.biomarkers.drug.5$rank),]
plots.no = nrow(top.significant.biomarkers.drug)
rr[[drug.name]] = top.significant.biomarkers.drug
pdf(file = file.path(path.diagrams, sprintf("%s.pdf",gsub("drugid_","",drug))), height=4*(plots.no+1), width=16)
par(mfrow=c((plots.no + 1), 4))
fnPlotAUC(first = "ccle", second = "cgp", drug, tissue.type = "all", color = "#666666")
fnPlotAUC(first = "ccle", second = "cgp", drug, tissue.type = "breast", color = "#996666")
fnPlotAUC(first = "ccle", second = "gray", drug, tissue.type = "", color = "#CC3399")
fnPlotAUC(first = "gray", second = "cgp", drug, tissue.type = "", color = "#663399")
for(i in 1:plots.no)
{
biomarker = fnDefineBiomarker (gene.id = as.character(top.significant.biomarkers.drug[i,"gene.id"]),
isoform.id = as.character(top.significant.biomarkers.drug[i,"transcript.id"]),
estimate = as.numeric(top.significant.biomarkers.drug[i,"estimate"]),
pvalue = as.numeric(top.significant.biomarkers.drug[i,"bonferroni"]),
R2 = as.numeric(top.significant.biomarkers.drug[i,"R2"]),
type = as.character(top.significant.biomarkers.drug[i,"type"]))
fnPlotEXP(first = paste0("ccle.",model), second = paste0("gray.",model), biomarker)
fnPlotCCLECGP(biomarker, tissue.type = "breast")
gray = fnValidateWithGray(biomarker, method = "all", color = "#66CC00")
rr[[drug.name]][i, "all.gray.n"] = gray$n
rr[[drug.name]][i, "all.gray.pvalue"] = gray$pvalue
rr[[drug.name]][i, "all.gray.estimate"] = gray$estimate
gray = fnValidateWithGray(biomarker, method = "common", color = "#336600")
rr[[drug.name]][i, "common.gray.n"] = gray$n
rr[[drug.name]][i, "common.gray.pvalue"] = gray$pvalue
rr[[drug.name]][i, "common.gray.estimate"] = gray$estimate
}
dev.off()
i
top.significant.biomarkers.drug
drug.name = gsub("drugid_","",drug)
top.significant.biomarkers.drug = top.significant.biomarkers[[drug.name]]
top.significant.biomarkers.drug.5 = NULL
specificities = table(top.significant.biomarkers.drug$specificity)
for(spec in names(specificities))
{
top.significant.biomarkers.drug.5 = rbind(top.significant.biomarkers.drug.5, subset(top.significant.biomarkers.drug, specificity == spec)[1:min(validation.cut.off,specificities[spec]),])
}
top.significant.biomarkers.drug = top.significant.biomarkers.drug.5[order(top.significant.biomarkers.drug.5$rank),]
plots.no = nrow(top.significant.biomarkers.drug)
rr[[drug.name]] = top.significant.biomarkers.drug
pdf(file = file.path(path.diagrams, sprintf("%s.pdf",gsub("drugid_","",drug))), height=4*(plots.no+1), width=16)
par(mfrow=c((plots.no + 1), 4))
fnPlotAUC(first = "ccle", second = "cgp", drug, tissue.type = "all", color = "#666666")
fnPlotAUC(first = "ccle", second = "cgp", drug, tissue.type = "breast", color = "#996666")
fnPlotAUC(first = "ccle", second = "gray", drug, tissue.type = "", color = "#CC3399")
fnPlotAUC(first = "gray", second = "cgp", drug, tissue.type = "", color = "#663399")
for(i in 1:plots.no)
{
biomarker = fnDefineBiomarker (gene.id = as.character(top.significant.biomarkers.drug[i,"gene.id"]),
isoform.id = as.character(top.significant.biomarkers.drug[i,"transcript.id"]),
estimate = as.numeric(top.significant.biomarkers.drug[i,"estimate"]),
pvalue = as.numeric(top.significant.biomarkers.drug[i,"bonferroni"]),
R2 = as.numeric(top.significant.biomarkers.drug[i,"R2"]),
type = as.character(top.significant.biomarkers.drug[i,"type"]))
fnPlotEXP(first = paste0("ccle.",model), second = paste0("gray.",model), biomarker)
fnPlotCCLECGP(biomarker, tissue.type = "breast")
gray = fnValidateWithGray(biomarker, method = "all", color = "#66CC00")
rr[[drug.name]][i, "all.gray.n"] = gray$n
rr[[drug.name]][i, "all.gray.pvalue"] = gray$pvalue
rr[[drug.name]][i, "all.gray.estimate"] = gray$estimate
gray = fnValidateWithGray(biomarker, method = "common", color = "#336600")
rr[[drug.name]][i, "common.gray.n"] = gray$n
rr[[drug.name]][i, "common.gray.pvalue"] = gray$pvalue
rr[[drug.name]][i, "common.gray.estimate"] = gray$estimate
}
i = 2
biomarker = fnDefineBiomarker (gene.id = as.character(top.significant.biomarkers.drug[i,"gene.id"]),
isoform.id = as.character(top.significant.biomarkers.drug[i,"transcript.id"]),
estimate = as.numeric(top.significant.biomarkers.drug[i,"estimate"]),
pvalue = as.numeric(top.significant.biomarkers.drug[i,"bonferroni"]),
R2 = as.numeric(top.significant.biomarkers.drug[i,"R2"]),
type = as.character(top.significant.biomarkers.drug[i,"type"]))
biomarker
View(top.significant.biomarkers.drug)
fnPlotEXP(first = paste0("ccle.",model), second = paste0("gray.",model), biomarker)
model
fnValidation <- function(top.significant.biomarkers, validation.cut.off)
{
rr <- list()
for(drug in colnames(gray.drug.sensitivity))
{
drug.name = gsub("drugid_","",drug)
top.significant.biomarkers.drug = top.significant.biomarkers[[drug.name]]
top.significant.biomarkers.drug.5 = NULL
specificities = table(top.significant.biomarkers.drug$specificity)
for(spec in names(specificities))
{
top.significant.biomarkers.drug.5 = rbind(top.significant.biomarkers.drug.5, subset(top.significant.biomarkers.drug, specificity == spec)[1:min(validation.cut.off,specificities[spec]),])
}
top.significant.biomarkers.drug = top.significant.biomarkers.drug.5[order(top.significant.biomarkers.drug.5$rank),]
plots.no = nrow(top.significant.biomarkers.drug)
rr[[drug.name]] = top.significant.biomarkers.drug
pdf(file = file.path(path.diagrams, sprintf("%s.pdf",gsub("drugid_","",drug))), height=4*(plots.no+1), width=16)
par(mfrow=c((plots.no + 1), 4))
fnPlotAUC(first = "ccle", second = "cgp", drug, tissue.type = "all", color = "#666666")
fnPlotAUC(first = "ccle", second = "cgp", drug, tissue.type = "breast", color = "#996666")
fnPlotAUC(first = "ccle", second = "gray", drug, tissue.type = "", color = "#CC3399")
fnPlotAUC(first = "gray", second = "cgp", drug, tissue.type = "", color = "#663399")
for(i in 1:plots.no)
{
biomarker = fnDefineBiomarker (gene.id = as.character(top.significant.biomarkers.drug[i,"gene.id"]),
isoform.id = as.character(top.significant.biomarkers.drug[i,"transcript.id"]),
estimate = as.numeric(top.significant.biomarkers.drug[i,"estimate"]),
pvalue = as.numeric(top.significant.biomarkers.drug[i,"bonferroni"]),
R2 = as.numeric(top.significant.biomarkers.drug[i,"R2"]),
type = as.character(top.significant.biomarkers.drug[i,"type"]))
fnPlotEXP(first = paste0("ccle.",biomarker$type), second = paste0("gray.",biomarker$type), biomarker)
fnPlotCCLECGP(biomarker, tissue.type = "breast")
gray = fnValidateWithGray(biomarker, method = "all", color = "#66CC00")
rr[[drug.name]][i, "all.gray.n"] = gray$n
rr[[drug.name]][i, "all.gray.pvalue"] = gray$pvalue
rr[[drug.name]][i, "all.gray.estimate"] = gray$estimate
gray = fnValidateWithGray(biomarker, method = "common", color = "#336600")
rr[[drug.name]][i, "common.gray.n"] = gray$n
rr[[drug.name]][i, "common.gray.pvalue"] = gray$pvalue
rr[[drug.name]][i, "common.gray.estimate"] = gray$estimate
}
dev.off()
}
return(rr)
}
Validation.result = fnValidation(top.significant.biomarkers, validation.cut.off = 5)
WriteXLS::WriteXLS("Validation.result", ExcelFileName=file.path(path.diagrams, "top.biomarkers.gray.xlsx"), row.names=TRUE)
drug = "drugid_17AAG"; tissue.type = "all"; drug.name = gsub("drugid_","", drug)
biomarkers = fnFetchBiomarkersToValdiate(top.significant.biomarkers, drug = "drugid_17AAG", indices = 1:4)
fnPlotAUCoverCellLinesCCLE.CGP(drug, tissue.type = "all", biomarkers)
fnPlotAUCoverCellLinesGray(drug, tissue.type = "breast", biomarkers)
fnPlotAUCoverCellLinesCCLE.CGP(drug, tissue.type = "breast", biomarkers)
fnPlotAUCoverCellLinesGray(drug, tissue.type = "breast", biomarkers)
biomarker
fnPlotAUCoverCellLinesCCLE.CGP <- function(drug, tissue.type, biomarkers)
{
ccle.sensitivity <- subset(ccle.drug.sensitivity, !is.na(ccle.drug.sensitivity[,drug]), select = drug)
sensitivity = cbind(ccle.sensitivity, cgp.drug.sensitivity[rownames(ccle.sensitivity),drug],ccle.drug.tissuetype[rownames(ccle.sensitivity),"tissue.type"])
colnames(sensitivity) = c("ccle.AUC","cgp.AUC","tissue.type")
rownames(sensitivity) = rownames(ccle.sensitivity)
tissue.type.str = ""
if(tissue.type != "all")
{
sensitivity = sensitivity[which(sensitivity$tissue.type == tissue.type),]
tissue.type.str = sprintf("in %s cell lines", tissue.type)
}
sensitivity[,"col"] = "#000000"
sensitivity = sensitivity[order(sensitivity[,"cgp.AUC"]),]
sensitivity[!is.na(sensitivity[,"cgp.AUC"]),"col"] = colorRampPalette(c("blue","light blue","red"))(nrow(sensitivity[!is.na(sensitivity[,"cgp.AUC"]),]))
sensitivity = sensitivity[order(sensitivity[,"ccle.AUC"]),]
exp.db = NULL;
exp.col = NULL;
for (i in 1:length(biomarkers))
{
if (biomarkers[[i]]$type == "isoform")
{
exp.db = cbind(exp.db, ccle.drug.rnaseq.isoforms.fpkm[rownames(sensitivity),biomarkers[[i]]$isoform.id])
}else{
exp.db = cbind(exp.db, ccle.drug.rnaseq.genes.fpkm[rownames(sensitivity),biomarkers[[i]]$gene.id])
}
exp.col = c(exp.col, exp.db[,i])
}
names(exp.col) = 1:length(exp.col)
exp.col = data.frame("exp" = exp.col, "col" ="#000000" )
exp.col = exp.col[order(exp.col[,"exp"]),]
exp.col[,"col"] = colorRampPalette(c("blue","white","red"))(nrow(exp.col))
rownames(exp.db) = rownames(sensitivity)
colnames(exp.db) = sapply(biomarkers,function(x){x[["short.label"]]})
my.xlim = c(1,nrow(sensitivity))
my.ylim = range(sensitivity[,1])
color.scheme <- rgb( seq(0,1,length=256),  # Red
seq(0,1,length=256),  # Green
seq(1,0,length=256))  # Blue
pdf(file = file.path(path.diagrams, sprintf("AUC_%s_%s.pdf",dataset.name, gsub("drugid_","",drug))), height=6, width=12)
par(mfrow=c(2,1))
image(exp.db, col = color.scheme, axes = FALSE)
grid(nx = nrow(exp.db), ny = ncol(exp.db), lty = 1)
if(ncol(exp.db) != 1){at.place = (0:(ncol(exp.db) - 1))/(ncol(exp.db) - 1)}else{at.place = .5}
axis(2,at = at.place, labels=colnames(exp.db), las=2, cex.axis = .6, tick = FALSE)
#plot(1:nrow(sensitivity),sensitivity[,1], type = "l", xlim = my.xlim, ylim = my.ylim, xlab="cell lines", ylab=colnames(sensitivity)[1],main = sprintf("%s AUC over %s cell lines in %s", toupper(dataset.name), tissue.type, gsub("drugid_","",drug)), cex.main = .9)
plot(NA, xlim = my.xlim, ylim = my.ylim,ylab='',xlab='', axes = FALSE)
axis(1,at = 1:nrow(sensitivity), labels=rownames(sensitivity), las = 2, cex.axis = .5, tck = -.05)
axis(2,at = sensitivity[,"ccle.AUC"], labels=sensitivity[,"ccle.AUC"], cex.axis = .5, tck = -.02)
box(lty = 1)
points(1:nrow(sensitivity),sensitivity[,"ccle.AUC"], pch = 20,col = sensitivity[,"col"])
dev.off()
}
fnPlotAUCoverCellLinesGray <- function(drug, tissue.type, biomarkers)
{
sensitivity <- subset(gray.drug.sensitivity, !is.na(gray.drug.sensitivity[,drug]), select = drug)
sensitivity = cbind(sensitivity , "col" = "#000000")
sensitivity = sensitivity[order(sensitivity[,drug]),]
sensitivity = subset(sensitivity, rownames(sensitivity) %in% rownames(gray.drug.rnaseq.genes.fpkm))
exp.db = NULL;
exp.col = NULL;
for (i in 1:length(biomarkers))
{
if (biomarkers[[i]]$type == "isoform")
{
exp.db = cbind(exp.db, gray.drug.rnaseq.isoforms.fpkm[rownames(sensitivity),biomarkers[[i]]$isoform.id])
}else{
exp.db = cbind(exp.db, gray.drug.rnaseq.genes.fpkm[rownames(sensitivity),biomarkers[[i]]$gene.id])
}
exp.col = c(exp.col, exp.db[,i])
}
names(exp.col) = 1:length(exp.col)
exp.col = data.frame("exp" = exp.col, "col" ="#000000" )
exp.col = exp.col[order(exp.col[,"exp"]),]
exp.col[,"col"] = colorRampPalette(c("blue","white","red"))(nrow(exp.col))
rownames(exp.db) = rownames(sensitivity)
colnames(exp.db) = sapply(biomarkers, function(x){x[["short.label"]]})
my.xlim = c(1,nrow(sensitivity))
my.ylim = range(sensitivity[,1])
pdf(file = file.path(path.diagrams, sprintf("AUC_Gray_%s_%s.pdf",dataset.name, gsub("drugid_","",drug))), height=6, width=12)
par(mfrow=c(2,1))
image(exp.db, col = exp.col[,"col"], axes = FALSE)
grid(nx = nrow(exp.db), ny = ncol(exp.db), lty = 1)
axis(2,at = (0:(ncol(exp.db) - 1))/(ncol(exp.db) - 1), labels=colnames(exp.db), las=2, cex.axis = .6, tick = FALSE)
#plot(1:nrow(sensitivity),sensitivity[,1], type = "l", xlim = my.xlim, ylim = my.ylim, xlab="cell lines", ylab=colnames(sensitivity)[1],main = sprintf("%s AUC over %s cell lines in %s", toupper(dataset.name), tissue.type, gsub("drugid_","",drug)), cex.main = .9)
plot(NA, xlim = my.xlim, ylim = my.ylim,ylab='',xlab='', axes = FALSE)
axis(1,at = 1:nrow(sensitivity), labels=rownames(sensitivity), las = 2, cex.axis = .5, tck = -.05)
axis(2,at = sensitivity[,drug], labels=sensitivity[,drug], cex.axis = .5, tck = -.02)
box(lty = 1)
points(1:nrow(sensitivity),sensitivity[,drug], pch = 20, col = "#663399")
dev.off()
}
fnPlotAUCoverCellLinesCCLE.CGP(drug, tissue.type = "breast", biomarkers)
fnPlotAUCoverCellLinesGray(drug, tissue.type = "breast", biomarkers)
dim(cgp.drug.sensitivity)
options(echo=TRUE) # if you want see commands in output file
args <- commandArgs(trailingOnly = TRUE)
#print(args)
path.source <- file.path("Documents","CCLEDrug")#("","mnt","work1","users", "bhklab","Projects","sensitivity")# as.character(args[1])
target.folder <- file.path("Documents","CCLEDrug")#file.path("","mnt","work1", "users", "bhklab","Projects","sensitivity") #as.character(args[2])
source(file.path(path.source,"foo.sensitivity.R"))
path.data <- file.path(target.folder , "data")
if(!file.exists(path.data)) { dir.create(path.data, showWarnings=FALSE, recursive=TRUE) }
## download raw sensitivity data
archivn <- "CCLE_NP24.2009_Drug_data_2012.02.20.csv"
if(!file.exists(file.path(path.data, "dwl"))){dir.create(file.path(path.data, "dwl"), showWarnings=FALSE)}
myfn <- file.path(path.data, "dwl", archivn)
if (!file.exists(myfn)) {
dwl.status <- download.file(url="http://www.broadinstitute.org/ccle/downloadFile/DefaultSystemRoot/exp_10/ds_27/CCLE_NP24.2009_Drug_data_2012.02.20.csv?downloadff=true&fileId=2114", destfile=file.path(path.data, "dwl", archivn), quiet=TRUE)
if(dwl.status != 0) { stop("Download failed, please rerun the pipeline!") }
}
require(gdata) || stop("Library gdata is not available!")
ccle.raw.drug.sensitivity <- read.csv(myfn, stringsAsFactors = FALSE)
ccle.drug.sensitivity = data.frame(matrix(NA, nrow = nrow(ccle.raw.drug.sensitivity), ncol = 6))
rownames(ccle.drug.sensitivity) = 1:nrow(ccle.drug.sensitivity)
colnames(ccle.drug.sensitivity) = c("cellline","drug","AUC","AUC.original","slope","slope0")
template.doses = as.numeric(unlist(strsplit(ccle.raw.drug.sensitivity[1,"Doses..uM."], split=",")))
doses.NO = length(template.doses)
ccle.drug.sensitivity.detail = data.frame(matrix(NA, nrow = nrow(ccle.raw.drug.sensitivity), ncol = doses.NO*2 + 2))
rownames(ccle.drug.sensitivity.detail) = 1:nrow(ccle.drug.sensitivity.detail)
colnames(ccle.drug.sensitivity.detail)[1:2] = c("cellline","drug")
col.index = 2
for( i in 1: doses.NO)
{
col.index = col.index + 1
colnames(ccle.drug.sensitivity.detail)[col.index] = sprintf("log10_dose_%s",i)
}
for( i in 1: doses.NO)
{
col.index = col.index + 1
colnames(ccle.drug.sensitivity.detail)[col.index] = sprintf("viability_%s",i)
}
index = 1210
ccle.raw.drug.sensitivity[index,]
fncomputeSensitvity(as.data.frame(ccle.raw.drug.sensitivity[index,]), template.doses, "ccle")
for(index in 1:nrow(ccle.raw.drug.sensitivity))
{
ccle.drug.sensitivity[index,"drug"] = ccle.raw.drug.sensitivity[index,"Compound"]
ccle.drug.sensitivity[index,"cellline"] = ccle.raw.drug.sensitivity[index,"Primary.Cell.Line.Name"]
ccle.drug.sensitivity.detail[index,"drug"] = ccle.raw.drug.sensitivity[index,"Compound"]
ccle.drug.sensitivity.detail[index,"cellline"] = ccle.raw.drug.sensitivity[index,"Primary.Cell.Line.Name"]
sensitivity = fncomputeSensitvity(as.data.frame(ccle.raw.drug.sensitivity[index,]), template.doses, "ccle")
ccle.drug.sensitivity[index,"AUC"] = sensitivity$AUC
ccle.drug.sensitivity[index,"AUC.original"] = fnComputeAUC.original.CCLE(sensitivity$drug.response)
ccle.drug.sensitivity[index,"slope"] = sensitivity$slope
ccle.drug.sensitivity[index,"slope0"] = sensitivity$slope0
for(k in 1:nrow(sensitivity$drug.response))
{
ccle.drug.sensitivity.detail[index,sprintf("log10_dose_%s",k)] = sensitivity$drug.response[k,"log10doses"]
ccle.drug.sensitivity.detail[index,sprintf("viability_%s",k)] = sensitivity$drug.response[k,"response1"]
}
}
path.result <- file.path(target.folder , "result")
if(!file.exists(path.result)) { dir.create(path.result, showWarnings=FALSE, recursive=TRUE) }
write.csv(ccle.drug.sensitivity, file = file.path(path.result,"ccle_sensitivity_broad.csv"))
write.csv(ccle.drug.sensitivity.detail, file = file.path(path.result,"ccle_sensitivity_detail_broad.csv"))
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope0,xlab="AUC", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope0), digits = 2)), pch=16, method="plain")
options(echo=TRUE) # if you want see commands in output file
args <- commandArgs(trailingOnly = TRUE)
#print(args)
path.source <- file.path("Documents","CCLEDrug")#("","mnt","work1","users", "bhklab","Projects","sensitivity")# as.character(args[1])
target.folder <- file.path("Documents","CCLEDrug")#file.path("","mnt","work1", "users", "bhklab","Projects","sensitivity") #as.character(args[2])
source(file.path(path.source,"foo.sensitivity.R"))
path.data <- file.path(target.folder , "data")
if(!file.exists(path.data)) { dir.create(path.data, showWarnings=FALSE, recursive=TRUE) }
## download raw sensitivity data
archivn <- "CCLE_NP24.2009_Drug_data_2012.02.20.csv"
if(!file.exists(file.path(path.data, "dwl"))){dir.create(file.path(path.data, "dwl"), showWarnings=FALSE)}
myfn <- file.path(path.data, "dwl", archivn)
if (!file.exists(myfn)) {
dwl.status <- download.file(url="http://www.broadinstitute.org/ccle/downloadFile/DefaultSystemRoot/exp_10/ds_27/CCLE_NP24.2009_Drug_data_2012.02.20.csv?downloadff=true&fileId=2114", destfile=file.path(path.data, "dwl", archivn), quiet=TRUE)
if(dwl.status != 0) { stop("Download failed, please rerun the pipeline!") }
}
require(gdata) || stop("Library gdata is not available!")
ccle.raw.drug.sensitivity <- read.csv(myfn, stringsAsFactors = FALSE)
ccle.drug.sensitivity = data.frame(matrix(NA, nrow = nrow(ccle.raw.drug.sensitivity), ncol = 6))
rownames(ccle.drug.sensitivity) = 1:nrow(ccle.drug.sensitivity)
colnames(ccle.drug.sensitivity) = c("cellline","drug","AUC","AUC.original","slope","slope0")
template.doses = as.numeric(unlist(strsplit(ccle.raw.drug.sensitivity[1,"Doses..uM."], split=",")))
doses.NO = length(template.doses)
ccle.drug.sensitivity.detail = data.frame(matrix(NA, nrow = nrow(ccle.raw.drug.sensitivity), ncol = doses.NO*2 + 2))
rownames(ccle.drug.sensitivity.detail) = 1:nrow(ccle.drug.sensitivity.detail)
colnames(ccle.drug.sensitivity.detail)[1:2] = c("cellline","drug")
col.index = 2
for( i in 1: doses.NO)
{
col.index = col.index + 1
colnames(ccle.drug.sensitivity.detail)[col.index] = sprintf("log10_dose_%s",i)
}
for( i in 1: doses.NO)
{
col.index = col.index + 1
colnames(ccle.drug.sensitivity.detail)[col.index] = sprintf("viability_%s",i)
}
for(index in 1:nrow(ccle.raw.drug.sensitivity))
{
ccle.drug.sensitivity[index,"drug"] = ccle.raw.drug.sensitivity[index,"Compound"]
ccle.drug.sensitivity[index,"cellline"] = ccle.raw.drug.sensitivity[index,"Primary.Cell.Line.Name"]
ccle.drug.sensitivity.detail[index,"drug"] = ccle.raw.drug.sensitivity[index,"Compound"]
ccle.drug.sensitivity.detail[index,"cellline"] = ccle.raw.drug.sensitivity[index,"Primary.Cell.Line.Name"]
sensitivity = fncomputeSensitvity(as.data.frame(ccle.raw.drug.sensitivity[index,]), template.doses, "ccle")
ccle.drug.sensitivity[index,"AUC"] = sensitivity$AUC
ccle.drug.sensitivity[index,"AUC.original"] = fnComputeAUC.original.CCLE(sensitivity$drug.response)
ccle.drug.sensitivity[index,"slope"] = sensitivity$slope
ccle.drug.sensitivity[index,"slope0"] = sensitivity$slope0
for(k in 1:nrow(sensitivity$drug.response))
{
ccle.drug.sensitivity.detail[index,sprintf("log10_dose_%s",k)] = sensitivity$drug.response[k,"log10doses"]
ccle.drug.sensitivity.detail[index,sprintf("viability_%s",k)] = sensitivity$drug.response[k,"response1"]
}
}
path.result <- file.path(target.folder , "result")
if(!file.exists(path.result)) { dir.create(path.result, showWarnings=FALSE, recursive=TRUE) }
write.csv(ccle.drug.sensitivity, file = file.path(path.result,"ccle_sensitivity_broad.csv"))
write.csv(ccle.drug.sensitivity.detail, file = file.path(path.result,"ccle_sensitivity_detail_broad.csv"))
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope0,xlab="AUC", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope0), digits = 2)), pch=16, method="plain")
is.na(ccle.drug.sensitivity)
ccle.drug.sensitivity[is.na(ccle.drug.sensitivity$AUC),]
ccle.drug.sensitivity[!is.na(ccle.drug.sensitivity$AUC),]
ccle.drug.sensitivity = ccle.drug.sensitivity[!is.na(ccle.drug.sensitivity$AUC),]
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope0,xlab="AUC", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope0), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$AUC.original,xlab="AUC", ylab="AUC Published", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$slope0, y=ccle.drug.sensitivity$AUC.original,xlab="AUC", ylab="AUC Published", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$slope0,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$slope0, y=ccle.drug.sensitivity$AUC.original,xlab="slope0", ylab="AUC", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$slope0,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope,xlab="AUC", ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain")
ccle.drug.sensitivity$AUC
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope,xlab="AUC", ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope/100,xlab="AUC", ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope,xlab="AUC", xlim = c(-.5,1), ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope,xlab="AUC", ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain", xlim = c(-.5,1))
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope,xlab="AUC", ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain")
pdf(file = file.path(path.result,"Correlation_sensitivity_measurments.pdf"), height=7, width=7)
par(mfrow = c(2,2))
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope,xlab="AUC", ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope0,xlab="AUC", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope0), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$AUC.original,xlab="AUC", ylab="AUC Published", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC.original, y=ccle.drug.sensitivity$slope0,xlab="AUC Published", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$slope0,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
dev.off()
pdf(file = file.path(path.result,"Correlation_sensitivity_measurments.pdf"), height=14, width=14)
par(mfrow = c(2,2))
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope,xlab="AUC", ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope0,xlab="AUC", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope0), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$AUC.original,xlab="AUC", ylab="AUC Published", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC.original, y=ccle.drug.sensitivity$slope0,xlab="AUC Published", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$slope0,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
dev.off()
hist(ccle.drug.sensitivity$slope0, breaks = 100, main="CGP", xlab = "slope")
options(echo=TRUE) # if you want see commands in output file
args <- commandArgs(trailingOnly = TRUE)
#print(args)
path.source <- file.path("Documents","CCLEDrug")#("","mnt","work1","users", "bhklab","Projects","sensitivity")# as.character(args[1])
target.folder <- file.path("Documents","CCLEDrug")#file.path("","mnt","work1", "users", "bhklab","Projects","sensitivity") #as.character(args[2])
source(file.path(path.source,"foo.sensitivity.R"))
path.data <- file.path(target.folder , "data")
if(!file.exists(path.data)) { dir.create(path.data, showWarnings=FALSE, recursive=TRUE) }
## download raw sensitivity data
archivn <- "CCLE_NP24.2009_Drug_data_2012.02.20.csv"
if(!file.exists(file.path(path.data, "dwl"))){dir.create(file.path(path.data, "dwl"), showWarnings=FALSE)}
myfn <- file.path(path.data, "dwl", archivn)
if (!file.exists(myfn)) {
dwl.status <- download.file(url="http://www.broadinstitute.org/ccle/downloadFile/DefaultSystemRoot/exp_10/ds_27/CCLE_NP24.2009_Drug_data_2012.02.20.csv?downloadff=true&fileId=2114", destfile=file.path(path.data, "dwl", archivn), quiet=TRUE)
if(dwl.status != 0) { stop("Download failed, please rerun the pipeline!") }
}
require(gdata) || stop("Library gdata is not available!")
ccle.raw.drug.sensitivity <- read.csv(myfn, stringsAsFactors = FALSE)
ccle.drug.sensitivity = data.frame(matrix(NA, nrow = nrow(ccle.raw.drug.sensitivity), ncol = 6))
rownames(ccle.drug.sensitivity) = 1:nrow(ccle.drug.sensitivity)
colnames(ccle.drug.sensitivity) = c("cellline","drug","AUC","AUC.original","slope","slope0")
template.doses = as.numeric(unlist(strsplit(ccle.raw.drug.sensitivity[1,"Doses..uM."], split=",")))
doses.NO = length(template.doses)
ccle.drug.sensitivity.detail = data.frame(matrix(NA, nrow = nrow(ccle.raw.drug.sensitivity), ncol = doses.NO*2 + 2))
rownames(ccle.drug.sensitivity.detail) = 1:nrow(ccle.drug.sensitivity.detail)
colnames(ccle.drug.sensitivity.detail)[1:2] = c("cellline","drug")
col.index = 2
for( i in 1: doses.NO)
{
col.index = col.index + 1
colnames(ccle.drug.sensitivity.detail)[col.index] = sprintf("log10_dose_%s",i)
}
for( i in 1: doses.NO)
{
col.index = col.index + 1
colnames(ccle.drug.sensitivity.detail)[col.index] = sprintf("viability_%s",i)
}
for(index in 1:nrow(ccle.raw.drug.sensitivity))
{
ccle.drug.sensitivity[index,"drug"] = ccle.raw.drug.sensitivity[index,"Compound"]
ccle.drug.sensitivity[index,"cellline"] = ccle.raw.drug.sensitivity[index,"Primary.Cell.Line.Name"]
ccle.drug.sensitivity.detail[index,"drug"] = ccle.raw.drug.sensitivity[index,"Compound"]
ccle.drug.sensitivity.detail[index,"cellline"] = ccle.raw.drug.sensitivity[index,"Primary.Cell.Line.Name"]
sensitivity = fncomputeSensitvity(as.data.frame(ccle.raw.drug.sensitivity[index,]), template.doses, "ccle")
ccle.drug.sensitivity[index,"AUC"] = sensitivity$AUC
ccle.drug.sensitivity[index,"AUC.original"] = fnComputeAUC.original.CCLE(sensitivity$drug.response)
ccle.drug.sensitivity[index,"slope"] = sensitivity$slope
ccle.drug.sensitivity[index,"slope0"] = sensitivity$slope0
for(k in 1:nrow(sensitivity$drug.response))
{
ccle.drug.sensitivity.detail[index,sprintf("log10_dose_%s",k)] = sensitivity$drug.response[k,"log10doses"]
ccle.drug.sensitivity.detail[index,sprintf("viability_%s",k)] = sensitivity$drug.response[k,"response1"]
}
}
path.result <- file.path(target.folder , "result")
if(!file.exists(path.result)) { dir.create(path.result, showWarnings=FALSE, recursive=TRUE) }
write.csv(ccle.drug.sensitivity, file = file.path(path.result,"ccle_sensitivity_broad.csv"))
write.csv(ccle.drug.sensitivity.detail, file = file.path(path.result,"ccle_sensitivity_detail_broad.csv"))
ccle.drug.sensitivity = ccle.drug.sensitivity[!is.na(ccle.drug.sensitivity$AUC),]
pdf(file = file.path(path.result,"Correlation_sensitivity_measurments.pdf"), height=14, width=14)
par(mfrow = c(2,2))
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope,xlab="AUC", ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope0,xlab="AUC", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope0), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$AUC.original,xlab="AUC", ylab="AUC Published", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC.original, y=ccle.drug.sensitivity$slope0,xlab="AUC Published", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$slope0,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
dev.off()
hist(ccle.drug.sensitivity$slope0, breaks = 100, main="CGP", xlab = "slope")
cgp.bimod = bimod (ccle.drug.sensitivity$slope0, model=c("E", "V"), do.scale=TRUE, verbose=FALSE)
library(mclust)
cgp.bimod = bimod (ccle.drug.sensitivity$slope0, model=c("E", "V"), do.scale=TRUE, verbose=FALSE)
ccle.bimod = bimod (ccle.drug.sensitivity$slope0, model=c("E", "V"), do.scale=TRUE, verbose=FALSE)
qnorm(.99, mean = ccle.bimod$gaussians["mean","cluster.1"], sd = sqrt(ccle.bimod$gaussians["variance","cluster.1"]))
hist(ccle.drug.sensitivity$slope0, breaks = 100, main="CCLE", xlab = "slope")
setwd("~/Documents/DRUGNET/Curation/output/")
drugall <- read.csv("drug_annotation_all.csv")
library(devtools) # install.packages("devtools") if missing
library(jsonlite) # install.packages("jsonlite")
install_github(repo = "CTSgetR", username = "dgrapov")
library(CTSgetR)
id<- drugall[,1]
from<-"Chemical Name"
to<- "PubChem CID"
allcids <- multi.CTSgetR(id,from,to,progress=TRUE)
drugall <- read.csv("drug_annotation_all.csv")
library(devtools) # install.packages("devtools") if missing
library(jsonlite) # install.packages("jsonlite")
install_github(repo = "CTSgetR", username = "dgrapov")
library(CTSgetR)
id<- drugall[,1]
from<-"Chemical Name"
to<- "PubChem CID"
allcids <- multi.CTSgetR(id,from,to,progress=TRUE)
path.out <- file.path ("output")
save(allcids, file.path(path.out, "pubchem_id.RData")
)
save(allcids, file = file.path(path.out, "pubchem_id.RData"))
getwd()
setwd("~/Documents/DRUGNET/Curation/")
save(allcids, file = file.path(path.out, "pubchem_id.RData"))
